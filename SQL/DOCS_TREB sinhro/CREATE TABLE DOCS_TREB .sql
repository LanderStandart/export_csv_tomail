/******************************************************************************/
/***               Generated by IBExpert 01.08.2019 16:32:16                ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE DOCS_TREB (
    ID                  DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    PARENT_ID           DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    DOC_TYPE            DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    STATUS              DM_STATUS /* DM_STATUS = INTEGER */,
    AGENT_ID            DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    DOCNUM              DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    DOCDATE             DM_DATETIME /* DM_DATETIME = TIMESTAMP */,
    CAPTION             DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    RGUID               DM_RGUID /* DM_RGUID = VARCHAR(32) */,
    INSERTDT            DM_DATETIME /* DM_DATETIME = TIMESTAMP */,
    POSTDT              DM_DATETIME /* DM_DATETIME = TIMESTAMP */,
    AUDIT_ID            DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    VNUM                DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    VSHIFT              DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    CREATER             DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    OWNER               DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    COMMITDATE          DM_DATETIME /* DM_DATETIME = TIMESTAMP */,
    PACKET              DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    DEVICE_NUM          DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    SUMMA               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUMMA_O             DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUM_NDSO            DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUM_NDSR            DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    CALCSUMMA           DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    COMMENTS            DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    SUMM1               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUMM2               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUMM3               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    SUMM4               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    CHECKDATA           DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    COMMITSESSION_ID    DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    SUM_DSC             DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    CASHDATA            DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    PRICE_TYPE          DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    CURRENCY_ID         DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    BASE_AGENT_ID       DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    CONTRACT_ID         DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    LINK_ID             DM_ID /* DM_ID = BIGINT */,
    DELETED_DOC_ID      DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    OPLATA              DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    DATE_OPL            DM_DATE /* DM_DATE = DATE */,
    MAKE_ID             DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    TO_PROFILE_ID       DM_ID /* DM_ID = BIGINT */,
    MANAGER             DM_TEXT /* DM_TEXT = VARCHAR(250) */,
    DOC_PAY_DATE        DM_DATE /* DM_DATE = DATE */,
    BONUS               DM_DOUBLE /* DM_DOUBLE = DOUBLE PRECISION */,
    D$UUID              DM_UUID NOT NULL /* DM_UUID = CHAR(36) NOT NULL */,
    D$SRVUPDDT          DM_DATETIME /* DM_DATETIME = TIMESTAMP */,
    AGENTS_CONTRACT_ID  DM_ID_NULL /* DM_ID_NULL = BIGINT */,
    G$PROFILE_ID        DM_ID /* DM_ID = BIGINT */,
    FROM_PROFILE_ID     DM_ID_NULL /* DM_ID_NULL = BIGINT */
);




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE DOCS_TREB ADD CONSTRAINT PK_DOCS_TREB PRIMARY KEY (D$UUID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE DESCENDING INDEX DOCS_TREB_IDX1 ON DOCS_TREB (VSHIFT);
CREATE INDEX DOCS_TREB_IDX10 ON DOCS_TREB (COMMITDATE);
CREATE INDEX DOCS_TREB_IDX11 ON DOCS_TREB (PARENT_ID);
CREATE INDEX DOCS_TREB_IDX12 ON DOCS_TREB (CHECKDATA);
CREATE INDEX DOCS_TREB_IDX13 ON DOCS_TREB (CASHDATA);
CREATE INDEX DOCS_TREB_IDX14 ON DOCS_TREB (COMMITDATE, ID);
CREATE DESCENDING INDEX DOCS_TREB_IDX15 ON DOCS_TREB (COMMITDATE, ID);
CREATE INDEX DOCS_TREB_IDX16 ON DOCS_TREB (DOCDATE);
CREATE DESCENDING INDEX DOCS_TREB_IDX17 ON DOCS_TREB (DOCDATE);
CREATE DESCENDING INDEX DOCS_TREB_IDX18 ON DOCS_TREB (COMMITDATE);
CREATE INDEX DOCS_TREB_IDX19 ON DOCS_TREB (MAKE_ID);
CREATE DESCENDING INDEX DOCS_TREB_IDX2 ON DOCS_TREB (VNUM);
CREATE INDEX DOCS_TREB_IDX3 ON DOCS_TREB (OWNER);
CREATE INDEX DOCS_TREB_IDX4 ON DOCS_TREB (STATUS);
CREATE DESCENDING INDEX DOCS_TREB_IDX5 ON DOCS_TREB (ID);
CREATE INDEX DOCS_TREB_IDX6 ON DOCS_TREB (DOCDATE);
CREATE INDEX DOCS_TREB_IDX7 ON DOCS_TREB (INSERTDT);
CREATE DESCENDING INDEX DOCS_TREB_IDX8 ON DOCS_TREB (POSTDT);
CREATE DESCENDING INDEX DOCS_TREB_IDX9 ON DOCS_TREB (PACKET);
CREATE INDEX DOCS_TREB_IDX_RGUID ON DOCS_TREB (RGUID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: DOCS_TREB_AD0 */
CREATE OR ALTER TRIGGER DOCS_TREB_AD0 FOR DOCS_TREB
INACTIVE AFTER DELETE POSITION 0
AS
begin
  --отключил, как в фармакоме, чтобы при чистке накладные не пропадали А.К. 20161014
  if (old.to_profile_id=cast((select p.param_value from params p where p.param_id='CODE_PROFILE') as dm_id)) then
  begin
    delete from doc_detail_active dda where (select docs.rguid from docs where docs.id=dda.doc_id)=old.rguid ;
    delete from docs where docs.rguid=old.rguid and status in (0,2);
  end
end
^


/* Trigger: DOCS_TREB_AD_DISTR */
CREATE OR ALTER TRIGGER DOCS_TREB_AD_DISTR FOR DOCS_TREB
ACTIVE AFTER DELETE POSITION 0
AS
begin
  update or insert into g$distribute (TABLENAME,UUID,SOPER,FROM_PROFILE_ID) values ('DOCS_TREB',old.d$uuid,2,null) matching (TABLENAME,UUID);
end
^


/* Trigger: DOCS_TREB_AU0 */
CREATE OR ALTER TRIGGER DOCS_TREB_AU0 FOR DOCS_TREB
INACTIVE AFTER UPDATE POSITION 0
AS
--ОТКЛЮЧЕНО Заявка 760688 А.К.
declare variable tek_d$uuid dm_uuid;
begin
  if (new.to_profile_id=cast((select p.param_value from params p where p.param_id='CODE_PROFILE') as dm_id)) then
  begin
    update docs set status=iif(new.status=1,2,-1) where RGUID=new.rguid;

    for select d$uuid from doc_detail_active_treb where doc_id=new.id  into :tek_d$uuid do
    begin
       if ((select d.id from docs d where d.rguid=new.rguid) is not null) then
      update doc_detail_active set doc_id=(select d.id from docs d where d.rguid=new.rguid) where doc_detail_active_treb_d$uuid=:tek_d$uuid;
    end
  end
end
^


/* Trigger: DOCS_TREB_BI */
CREATE OR ALTER TRIGGER DOCS_TREB_BI FOR DOCS_TREB
ACTIVE BEFORE INSERT POSITION 0
as
declare variable new_doc_id dm_id;
declare variable doc_type dm_id;
declare variable tek_d$uuid dm_uuid;
declare variable agent_id dm_id_null;
begin
  if (new.to_profile_id=cast((select p.param_value from params p where p.param_id='CODE_PROFILE') as dm_id)) then
  begin
    new_doc_id=gen_id(gen_docs_id,1);
    if (new.doc_type=41) then
      doc_type=6;
    else if (new.doc_type=39) then
      doc_type=8;
    else if (new.doc_type=40) then
      doc_type=2;
    else doc_type=1;
    select id from agents where deletedt is null and email=cast(new.g$profile_id as dm_text) into :agent_id;
   -- if (agent_id is null) then exception EX_WRONG_AGENT;
    if (agent_id is null) then agent_id=-2;
    update or insert into docs (ID,PARENT_ID,DOC_TYPE,AGENT_ID,DOCDATE,RGUID,AUDIT_ID,COMMITDATE,STATUS,VNUM,DOCNUM) values
     (:new_doc_id, 0,:doc_type,:agent_id,new.docdate,new.rguid,0,new.commitdate,iif(new.status=1,2,-1),new.vnum,new.docnum) matching (RGUID);
--20170105 А.К. заявка 861654, 862594
    for select d$uuid from doc_detail_active_treb where doc_id=new.id  into :tek_d$uuid do
--       update doc_detail_active set doc_id=:new_doc_id where doc_detail_active_treb_d$uuid=:tek_d$uuid;
       update doc_detail_active set doc_id=:new_doc_id where doc_id = 0 and doc_detail_active_treb_d$uuid=:tek_d$uuid;
  end
end
^


/* Trigger: DOCS_TREB_BI_DISTR */
CREATE OR ALTER TRIGGER DOCS_TREB_BI_DISTR FOR DOCS_TREB
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.d$srvupddt is null) then
  begin
    new.d$srvupddt='2000-01-01';
    if (new.d$uuid is null) then
      new.d$uuid=UUID_TO_CHAR(GEN_UUID());
    update or insert into g$distribute (TABLENAME,UUID,SOPER,FROM_PROFILE_ID) values ('DOCS_TREB',new.d$uuid,0,null) matching (TABLENAME,UUID);
  end
end
^


/* Trigger: DOCS_TREB_BU_DISTR */
CREATE OR ALTER TRIGGER DOCS_TREB_BU_DISTR FOR DOCS_TREB
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if (new.D$SRVUPDDT=old.D$SRVUPDDT) then
    update or insert into g$distribute (TABLENAME,UUID,SOPER,FROM_PROFILE_ID) values ('DOCS_TREB',new.d$uuid,1,null) matching (TABLENAME,UUID);
end
^


/* Trigger: DOCS_TREB_DEL_DUBLIC_BIU0 */
CREATE OR ALTER TRIGGER DOCS_TREB_DEL_DUBLIC_BIU0 FOR DOCS_TREB
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
begin
 delete from DOCS_TREB dt where dt.id = new.id and dt.g$profile_id = new.g$profile_id and dt.d$uuid <> new.d$uuid;
end
^

SET TERM ; ^



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN DOCS_TREB.DOC_TYPE IS 
'Тип документа';

COMMENT ON COLUMN DOCS_TREB.STATUS IS 
'0 - Текущий
1 - Проведен
-1 - Отменен
-2 - Редактируемый документ
2 - Отложен';

COMMENT ON COLUMN DOCS_TREB.INSERTDT IS 
'Фактическое время вставки записи, создания док-та';

COMMENT ON COLUMN DOCS_TREB.POSTDT IS 
'Фактическое время закрытия/проведения док-та';

COMMENT ON COLUMN DOCS_TREB.VNUM IS 
'Видимый служебный номер документа, например номер чека.
При инкременте VSHIFT - должен скидываться';

COMMENT ON COLUMN DOCS_TREB.VSHIFT IS 
'VSHIFT - сдвиг VNUM, как checkshift';

COMMENT ON COLUMN DOCS_TREB.COMMITDATE IS 
'внутреннее время документа';

COMMENT ON COLUMN DOCS_TREB.CASHDATA IS 
'Используется в cash_DOCS_TREB - сумма долга поставщику
NULL - документ не является приходным от поставщика / никто ничо никому не должен
0 - расчеты произведены => никто ничо никому не должен
больше 0 - мы должны
меньше 0 - мы переплатили )))';

COMMENT ON COLUMN DOCS_TREB.PRICE_TYPE IS 
'Тип цены, для приходных док-ов игнорируется (ставить 0)';

COMMENT ON COLUMN DOCS_TREB.CURRENCY_ID IS 
'валюта документа';

COMMENT ON COLUMN DOCS_TREB.LINK_ID IS 
'Код документа для связки цепочки документов';

COMMENT ON COLUMN DOCS_TREB.TO_PROFILE_ID IS 
'кому ушло (из таблицы g$profile_id)';

COMMENT ON COLUMN DOCS_TREB.MANAGER IS 
'менеджер, который отправил накладную';



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON DOCS_TREB TO STANDART WITH GRANT OPTION;